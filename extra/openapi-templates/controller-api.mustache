{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"mainote-backend/pkg/server/middleware"
	"mainote-backend/pkg/validator"
	"net/http"
	"strings"

	v "github.com/go-playground/validator/v10"

	"github.com/gorilla/mux"
)

// {{classname}}Controller binds http requests to an api service and writes the service results to the http response
type {{classname}}Controller struct {
	service {{classname}}Servicer
	errorHandler ErrorHandler
{{! Qase customization }}
	validator    *v.Validate
	middlewares  map[string][]middleware.MiddlewareFunc
}

// {{classname}}Option for how the controller is set up.
type {{classname}}Option func(*{{classname}}Controller)

// With{{classname}}ErrorHandler inject ErrorHandler into controller
func With{{classname}}ErrorHandler(h ErrorHandler) {{classname}}Option {
	return func(c *{{classname}}Controller) {
		c.errorHandler = h
	}
}

{{! Qase customization }}
func With{{classname}}Middlewares(middlewares map[string][]middleware.MiddlewareFunc) {{classname}}Option {
	return func(c *{{classname}}Controller) {
		c.middlewares = middlewares
	}
}

// New{{classname}}Controller creates a default api controller
func New{{classname}}Controller(s {{classname}}Servicer, opts ...{{classname}}Option) Router {
	controller := &{{classname}}Controller{
		service:      s,
		errorHandler: DefaultErrorHandler,
{{! Qase customization }}
		validator:    validator.New(),
		middlewares:  map[string][]middleware.MiddlewareFunc{},
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

{{! Qase customization }}
func (c *{{classname}}Controller) Middlewares() map[string][]middleware.MiddlewareFunc {
	return c.middlewares
}

// Routes returns all the api routes for the {{classname}}Controller
func (c *{{classname}}Controller) Routes() Routes {
	return Routes{
{{#operations}}
	{{#operation}}
		"{{operationId}}": Route{
			strings.ToUpper("{{httpMethod}}"),
			"{{{basePathWithoutHost}}}{{{path}}}",
			c.{{operationId}},
		},
	{{/operation}}
{{/operations}}
	}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (c *{{classname}}Controller) {{nickname}}(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	{{#hasFormParams}}
	{{#isMultipart}}
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isMultipart}}
	{{^isMultipart}}
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isMultipart}}
	{{/hasFormParams}}
	{{#routers}}
		{{#mux}}
			{{#hasPathParams}}
	params := mux.Vars(r)
			{{/hasPathParams}}
		{{/mux}}
	{{/routers}}
	{{#hasQueryParams}}
	query := r.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
	{{#isPathParam}}
	{{#isNumber}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		{{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isNumber}}
	{{#isFloat}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		{{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isFloat}}
	{{#isDouble}}
	{{paramName}}Param, err := parseNumericParameter[float64](
		{{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float64]({{defaultValue}}, parseFloat64),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float64](parseFloat64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float64](parseFloat64),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isDouble}}
	{{#isLong}}
		{{#vendorExtensions.x-go-uint64}}
			{{paramName}}Param, err := strconv.ParseUint({{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}}, 10, 64)
			if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
			}
		{{/vendorExtensions.x-go-uint64}}
		{{^vendorExtensions.x-go-uint64}}
			{{paramName}}Param, err := parseNumericParameter[int64](
			{{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
				WithDefaultOrParse[int64]({{defaultValue}}, parseInt64),{{/defaultValue}}{{^defaultValue}}{{#required}}
				WithRequire[int64](parseInt64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
				WithParse[int64](parseInt64),{{/required}}{{/defaultValue}}{{#minimum}}
				WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
				WithMaximum[int64]({{maximum}}),{{/maximum}}
			)
			if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
			}
		{{/vendorExtensions.x-go-uint64}}
	{{/isLong}}
	{{#isInteger}}
	{{paramName}}Param, err := parseNumericParameter[int32](
		{{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[int32]({{defaultValue}}, parseInt32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[int32](parseInt32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[int32](parseInt32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isInteger}}
	{{^isNumber}}
	{{^isFloat}}
	{{^isDouble}}
	{{^isLong}}
	{{^isInteger}}
	{{paramName}}Param := {{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}}
	{{/isInteger}}
	{{/isLong}}
	{{/isDouble}}
	{{/isFloat}}
	{{/isNumber}}
	{{/isPathParam}}
	{{#isQueryParam}}
	{{#isNumber}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		query.Get("{{baseName}}"),{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isNumber}}
	{{#isFloat}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		query.Get("{{baseName}}"),{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isFloat}}
	{{#isDouble}}
	{{paramName}}Param, err := parseNumericParameter[float64](
		query.Get("{{baseName}}"),{{#defaultValue}}
		WithDefaultOrParse[float64]({{defaultValue}}, parseFloat64),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float64](parseFloat64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float64](parseFloat64),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isDouble}}
	{{#isLong}}
		{{#vendorExtensions.x-go-uint64}}
			{{paramName}}Param, err := strconv.ParseInt(query.Get("{{baseName}}"), 10, 64)
			if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
			}
		{{/vendorExtensions.x-go-uint64}}
		{{^vendorExtensions.x-go-uint64}}
			{{paramName}}Param, err := parseNumericParameter[int64](
			query.Get("{{baseName}}"),{{#defaultValue}}
				WithDefaultOrParse[int64]({{defaultValue}}, parseInt64),{{/defaultValue}}{{^defaultValue}}{{#required}}
				WithRequire[int64](parseInt64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
				WithParse[int64](parseInt64),{{/required}}{{/defaultValue}}{{#minimum}}
				WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
				WithMaximum[int64]({{maximum}}),{{/maximum}}
			)
			if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
			}
		{{/vendorExtensions.x-go-uint64}}
	{{/isLong}}
	{{#isInteger}}
	{{paramName}}Param, err := parseNumericParameter[int32](
		query.Get("{{baseName}}"),{{#defaultValue}}
		WithDefaultOrParse[int32]({{defaultValue}}, parseInt32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[int32](parseInt32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[int32](parseInt32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isInteger}}
	{{#isBoolean}}
	{{paramName}}Param, err := parseBoolParameter(
		query.Get("{{baseName}}"),{{#defaultValue}}
		WithDefaultOrParse[bool]({{defaultValue}}, parseBool),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[bool](parseBool),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[bool](parseBool),{{/required}}{{/defaultValue}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isBoolean}}
	{{#isArray}}
	{{#items.isNumber}}
	{{paramName}}Param, err := parseNumericArrayParameter[float32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float32](parseFloat32),{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/items.isNumber}}
	{{#items.isFloat}}
	{{paramName}}Param, err := parseNumericArrayParameter[float32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float32](parseFloat32),{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
	return
	}
	{{/items.isFloat}}
	{{#items.isDouble}}
	{{paramName}}Param, err := parseNumericArrayParameter[float64](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float64](parseFloat64),{{#minimum}}
		WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/items.isDouble}}
	{{#items.isLong}}
	{{paramName}}Param, err := parseNumericArrayParameter[int64](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[int64](parseInt64),{{#minimum}}
		WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/items.isLong}}
	{{#items.isInteger}}
	{{paramName}}Param, err := parseNumericArrayParameter[int32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[int32](parseInt32),{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/items.isInteger}}
	{{^items.isNumber}}
	{{^items.isFloat}}
	{{^items.isDouble}}
	{{^items.isLong}}
	{{^items.isInteger}}
	{{paramName}}Param := strings.Split(query.Get("{{baseName}}"), ",")
	{{/items.isInteger}}
	{{/items.isLong}}
	{{/items.isDouble}}
	{{/items.isFloat}}
	{{/items.isNumber}}
	{{/isArray}}
	{{#isEnum}}
	{{paramName}}AllowedValues := []string{ {{#schema.allowableValues.values}}"{{{.}}}",{{/schema.allowableValues.values}} }
	{{paramName}}ParamStr := query.Get("{{baseName}}")
	if {{paramName}}ParamStr != "" && !slices.Contains({{paramName}}AllowedValues, {{paramName}}ParamStr) {
		c.errorHandler(w, r, &ParsingError{Err: errors.New("provided parameter has not allowed value")}, nil)
		return
	}
	{{paramName}}Param := {{dataType}}({{paramName}}ParamStr)
	{{/isEnum}}
	{{^isNumber}}
	{{^isFloat}}
	{{^isDouble}}
	{{^isLong}}
	{{^isInteger}}
	{{^isBoolean}}
	{{^isArray}}
	{{^isEnum}}
	{{#defaultValue}}
	{{paramName}}Param := "{{defaultValue}}"
	if query.Has("{{baseName}}") {
		{{paramName}}Param = query.Get("{{baseName}}")
	}
	{{/defaultValue}}
	{{^defaultValue}}
	{{paramName}}ParamStr := query.Get("{{baseName}}")
	{{#dataType}}
	{{paramName}}Param := {{dataType}}({{paramName}}ParamStr)
	{{/dataType}}
	{{^dataType}}
	{{paramName}}Param := {{paramName}}ParamStr
	{{/dataType}}
	{{/defaultValue}}
	{{/isEnum}}
	{{/isArray}}
	{{/isBoolean}}
	{{/isInteger}}
	{{/isLong}}
	{{/isDouble}}
	{{/isFloat}}
	{{/isNumber}}
	{{/isQueryParam}}
	{{#isFormParam}}
	{{#isFile}}{{#isArray}}
	{{paramName}}Param, err := ReadFormFilesToTempFiles(r, "{{baseName}}"){{/isArray}}{{^isArray}}
	{{paramName}}Param, err := ReadFormFileToTempFile(r, "{{baseName}}")
	{{/isArray}}
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isFile}}
	{{#isLong}}{{#isArray}}
	{{paramName}}Param, err := parseNumericArrayParameter[int64](
		r.FormValue("{{baseName}}"), ",", {{required}},
		WithParse[int64](parseInt64),{{#minimum}}
		WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isArray}}{{/isLong}}
	{{#isInteger}}{{#isArray}}
	{{paramName}}Param, err := parseNumericArrayParameter[int32](
		r.FormValue("{{baseName}}"), ",", {{required}},
		WithParse[int32](parseInt32),{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isArray}}{{/isInteger}}
	{{^isFile}}
	{{^isLong}}
	{{paramName}}Param := r.FormValue("{{baseName}}")
	{{/isLong}}
	{{/isFile}}
	{{/isFormParam}}
	{{#isHeaderParam}}
	{{paramName}}Param := r.Header.Get("{{baseName}}")
	{{/isHeaderParam}}
	{{#isBodyParam}}
	{{paramName}}Param := {{dataType}}{}
	d := json.NewDecoder(r.Body)
	{{^isAdditionalPropertiesTrue}}
{{! Qase customization }}
{{! d.DisallowUnknownFields() }}
	{{/isAdditionalPropertiesTrue}}
	if err := d.Decode(&{{paramName}}Param); err != nil {{^required}}&& !errors.Is(err, io.EOF) {{/required}}{
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{#isArray}}
		{{#items.isModel}}
	for idx := range {{paramName}}Param {
		el := &{{paramName}}Param[idx]
		if err := Assert{{baseType}}Required(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
{{! Qase customization }}
		if err := c.validator.Struct(*el); err != nil {
			if valErr, ok := err.(v.ValidationErrors); ok {
				convertedErr := validator.ConvertValidatorError(valErr)
				c.errorHandler(w, r, &convertedErr, nil)
			} else {
				c.errorHandler(w, r, err, nil)
			}
			return
		}
	}
		{{/items.isModel}}
	{{/isArray}}
	{{^isArray}}
		{{#isModel}}
	if err := Assert{{baseType}}Required(&{{paramName}}Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := Assert{{baseType}}Constraints(&{{paramName}}Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
{{! Qase customization }}
	if err := c.validator.Struct({{paramName}}Param); err != nil {
		if valErr, ok := err.(v.ValidationErrors); ok {
			convertedErr := validator.ConvertValidatorError(valErr)
			c.errorHandler(w, r, &convertedErr, nil)
		} else {
			c.errorHandler(w, r, err, nil)
		}
		return
	}
		{{/isModel}}
	{{/isArray}}
	{{/isBodyParam}}
	{{/allParams}}
	result, err := c.service.{{nickname}}(r.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
}{{/operation}}{{/operations}}
