{{>partial_header}}
package {{packageName}}

{{#models}}
{{#imports}}
import (
{{#-first}}	"{{{import}}}"
{{/-first}}{{^-first}}	"{{{import}}}"
{{/-first}}
)
{{/imports}}
{{^imports}}{{#hasValidation}}
import (
	"errors"
)
{{/hasValidation}}{{/imports}}{{/models}}

{{#model}}{{#isEnum}}{{#description}}// {{{classname}}} : {{{description}}}{{/description}}
type {{{classname}}} {{^format}}{{dataType}}{{/format}}{{{format}}}

// List of {{{classname}}}
const (
	{{#allowableValues}}
	{{#enumVars}}
	{{#enumClassPrefix}}{{{classname.toUpperCase}}}_{{/enumClassPrefix}}{{name}} {{{classname}}} = {{{value}}}
	{{/enumVars}}
	{{/allowableValues}}
){{/isEnum}}{{^isEnum}}{{#description}}
// {{classname}} - {{{description}}}{{/description}}
type {{classname}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}{{#description}}
	// {{{.}}}{{/description}}
	{{#deprecated}}
	// Deprecated
	{{/deprecated}}
	{{name}} {{#isAnyType}}{{#isArray}}[]{{/isArray}}any{{/isAnyType}}{{^isAnyType}}{{#vendorExtensions.x-go-array-of-nullable}}[]*{{{complexType}}}{{/vendorExtensions.x-go-array-of-nullable}}{{^vendorExtensions.x-go-array-of-nullable}}{{#vendorExtensions.x-go-uint64}}{{#isNullable}}*{{/isNullable}}uint64{{/vendorExtensions.x-go-uint64}}{{^vendorExtensions.x-go-uint64}}{{#isNullable}}*{{/isNullable}}{{{dataType}}}{{/vendorExtensions.x-go-uint64}}{{/vendorExtensions.x-go-array-of-nullable}}{{/isAnyType}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
}{{/isEnum}}

// Assert{{classname}}Required checks if the required fields are not zero-ed
func Assert{{classname}}Required(obj *{{#discriminator}}any{{/discriminator}}{{^discriminator}}{{classname}}{{/discriminator}}) (err error) {
{{#discriminator}}
	jsonMap, ok := (*obj).(map[string]any)
	if !ok {
		return &ParsingError{Err: errors.New("Failed to parse {{classname}}")}
	}

	entityType, ok := jsonMap["{{propertyBaseName}}"]
	if !ok {
		return &RequiredError{Field: "{{propertyBaseName}}"}
	}

	switch entityType {
	{{#mappedModels}}
	case "{{mappingName}}":
		*obj = {{modelName}}{
{{#model}}{{#vars}}			{{name}}: {{#isArray}}helpers.TypedSlice[{{items.baseType}}]({{#required}}jsonMap["{{baseName}}"]{{/required}}{{^required}}helpers.MapDefault(jsonMap, "{{baseName}}", []any{}){{/required}}.([]any)){{/isArray}}{{^isArray}}{{#isNumeric}}{{dataType}}({{/isNumeric}}jsonMap["{{baseName}}"].({{#isNumeric}}float64{{/isNumeric}}{{^isNumeric}}{{dataType}}{{/isNumeric}}){{#isNumeric}}){{/isNumeric}}{{/isArray}},
{{/vars}}{{/model}}		}

		err = Assert{{modelName}}Required(helpers.Ref((*obj).({{modelName}})))
	{{/mappedModels}}
	default:
		return errors.New(fmt.Sprintf("Unknown type: %s", entityType))
	}

	if err != nil {
		return err
	}

{{/discriminator}}
{{^discriminator}}
{{#hasRequired}}
	elements := map[string]any{
{{#requiredVars}}		"{{baseName}}": obj.{{name}},
{{/requiredVars}}	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}
{{/hasRequired}}
{{#parent}}
	{{^isMap}}
		{{^isArray}}
	if err = Assert{{{parent}}}Required(&obj.{{{parent}}}); err != nil {
		return err
	}

		{{/isArray}}
	{{/isMap}}
{{/parent}}
{{#Vars}}
	{{#isNullable}}
		{{#isModel}}
	if obj.{{name}} != nil {
		{{/isModel}}
		{{#isArray}}
			{{#items.isModel}}
	if obj.{{name}} != nil {
			{{/items.isModel}}
			{{^items.isModel}}
				{{#mostInnerItems.isModel}}
					{{^mostInnerItems.isPrimitiveType}}
	if obj.{{name}} != nil {
					{{/mostInnerItems.isPrimitiveType}}
				{{/mostInnerItems.isModel}}
			{{/items.isModel}}
		{{/isArray}}
	{{/isNullable}}
	{{#isModel}}
{{#isNullable}}	{{/isNullable}}	if err = Assert{{baseType}}Required({{^isNullable}}&{{/isNullable}}obj.{{name}}); err != nil {
{{#isNullable}}	{{/isNullable}}		return err
{{#isNullable}}	{{/isNullable}}	}
	{{/isModel}}
	{{#isArray}}
		{{#items.isModel}}
{{#isNullable}}	{{/isNullable}}	for idx := range {{#isNullable}}*{{/isNullable}}obj.{{name}} {
{{#isNullable}}	{{/isNullable}}		if err = Assert{{items.baseType}}Required({{#isNullable}}&(*obj.{{name}})[idx]{{/isNullable}}{{^isNullable}}{{^vendorExtensions.x-go-array-of-nullable}}&{{/vendorExtensions.x-go-array-of-nullable}}obj.{{name}}[idx]{{/isNullable}}); err != nil {
{{#isNullable}}	{{/isNullable}}			return err
{{#isNullable}}	{{/isNullable}}		}
{{#isNullable}}	{{/isNullable}}	}
		{{/items.isModel}}
		{{^items.isModel}}
			{{#mostInnerItems.isModel}}
				{{^mostInnerItems.isPrimitiveType}}
{{#isNullable}}	{{/isNullable}}	if err = AssertRecurseInterfaceRequired({{#isNullable}}*{{/isNullable}}obj.{{name}}, Assert{{mostInnerItems.dataType}}Required); err != nil {
{{#isNullable}}	{{/isNullable}}		return err
{{#isNullable}}	{{/isNullable}}	}
				{{/mostInnerItems.isPrimitiveType}}
			{{/mostInnerItems.isModel}}
		{{/items.isModel}}
	{{/isArray}}
	{{#isNullable}}
		{{#isModel}}
	}
		{{/isModel}}
		{{#isArray}}
			{{#items.isModel}}
	}
			{{/items.isModel}}
			{{^items.isModel}}
				{{#mostInnerItems.isModel}}
					{{^mostInnerItems.isPrimitiveType}}
	}
					{{/mostInnerItems.isPrimitiveType}}
				{{/mostInnerItems.isModel}}
			{{/items.isModel}}
		{{/isArray}}
	{{/isNullable}}
{{/Vars}}
{{/discriminator}}
	return nil
}

// Assert{{classname}}Constraints checks if the values respects the defined constraints
func Assert{{classname}}Constraints(obj *{{classname}}) error {
{{#Vars}}
{{#minimum}}
	if {{#isNullable}}obj.{{name}} != nil && *{{/isNullable}}obj.{{name}} < {{minimum}} {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
{{/minimum}}
{{#maximum}}
	if {{#isNullable}}obj.{{name}} != nil && *{{/isNullable}}obj.{{name}} > {{maximum}} {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
{{/maximum}}
{{/Vars}}
	return nil
}{{/model}}{{/models}}
