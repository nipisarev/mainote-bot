#!/bin/bash

# Mainote CLI - Command line interface for mainote-bot project
# This script allows running project commands from anywhere in the system

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Find the project directory
# First, check if we're already in the project directory
if [[ -f "./Makefile" && -d "./mainote_bot" ]]; then
    PROJECT_DIR="$(pwd)"
elif [[ -L "${BASH_SOURCE[0]}" ]]; then
    # If this is a symlink (global installation), follow it to find the project
    REAL_SCRIPT="$(readlink "${BASH_SOURCE[0]}")"
    PROJECT_DIR="$(cd "$(dirname "$REAL_SCRIPT")" && pwd)"
else
    # If run locally, use the script's directory
    PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Verify we found the correct project directory
if [[ ! -f "$PROJECT_DIR/Makefile" || ! -d "$PROJECT_DIR/mainote_bot" ]]; then
    echo -e "${RED}Error: Could not find mainote-bot project directory.${NC}"
    echo "Please ensure you're in the project directory or mainote-cli is installed correctly."
    echo "Searched in: $PROJECT_DIR"
    exit 1
fi

# Function to show CLI-specific help
show_cli_help() {
    echo -e "${BLUE}ðŸš€ Mainote CLI - Project Management Tool${NC}"
    echo ""
    echo "Usage: mainote-cli [COMMAND]"
    echo ""
    echo -e "${GREEN}Development Commands:${NC}"
    echo "  generate-api       Generate Go API code from OpenAPI specification"
    echo "  dev-python         Start Python bot locally"
    echo "  dev-go             Start Go backend locally"
    echo ""
    echo -e "${GREEN}Database Commands:${NC}"
    echo "  db-migrate         Apply database migrations"
    echo "  db-info            Show migration status"
    echo "  db-create          Create new migration file"
    echo "  db-validate        Validate migrations"
    echo "  db-repair          Repair migration metadata"
    echo "  db-reset           Reset database (development only)"
    echo "  db-proxy           Start database proxy (fly proxy to local port 35432)"
    echo ""
    echo -e "${GREEN}Docker Commands:${NC}"
    echo "  start              Start Docker development environment"
    echo "  stop               Stop Docker development environment"
    echo "  restart            Restart Docker development environment"
    echo "  reset              Reset environment (stop + clean + build + start)"
    echo "  logs               Show Docker logs"
    echo "  status             Show Docker services status"
    echo "  shell              Open shell in Python bot container"
    echo ""
    echo -e "${YELLOW}All Available Commands:${NC}"
    echo "  Run 'mainote-cli help-full' to see all available make targets"
    echo ""
    echo -e "${BLUE}Examples:${NC}"
    echo "  mainote-cli start          # Start development environment"
    echo "  mainote-cli restart        # Restart development environment"
    echo "  mainote-cli reset          # Reset environment (clean + build + start)"
    echo "  mainote-cli generate-api   # Generate API code from OpenAPI spec"
    echo "  mainote-cli dev-python     # Start Python bot locally"
    echo "  mainote-cli db-proxy       # Start database proxy (connect to localhost:35432)"
    echo "  mainote-cli prod-start     # Start production environment"
    echo "  mainote-cli docker-clean   # Clean Docker environment"
    echo ""
}

# Change to project directory
cd "$PROJECT_DIR"

# Handle special cases and shortcuts
case "${1:-help}" in
    "help"|"-h"|"--help"|"")
        show_cli_help
        ;;
    "help-full")
        make help
        ;;
    "start")
        # Shortcut for docker-start
        make docker-start
        ;;
    "stop")
        # Shortcut for docker-stop
        make docker-stop
        ;;
    "restart")
        # Shortcut for restart
        make restart
        ;;
    "reset")
        # Reset environment: stop, clean, build, and start
        echo -e "${BLUE}ðŸ”„ Resetting development environment...${NC}"
        
        # Stop all containers
        echo -e "${YELLOW}Stopping containers...${NC}"
        make docker-stop || true
        
        # Remove all containers and volumes
        echo -e "${YELLOW}Cleaning up containers and volumes...${NC}"
        docker compose down -v || true
        
        # Remove any dangling images
        echo -e "${YELLOW}Cleaning up dangling images...${NC}"
        docker image prune -f || true
        
        # Rebuild and start
        echo -e "${YELLOW}Rebuilding and starting environment...${NC}"
        make docker-build
        make docker-start
        
        # Wait for database to be ready and reset/migrate
        echo -e "${YELLOW}Waiting for database to be ready...${NC}"
        sleep 10  # Give containers time to start
        
        echo -e "${YELLOW}Resetting and migrating database...${NC}"
        # Set FORCE_RESET to skip interactive confirmation
        FORCE_RESET=true make db-reset
        
        echo -e "${GREEN}âœ… Environment reset complete!${NC}"
        ;;
    "logs")
        # Shortcut for docker-logs
        make docker-logs
        ;;
    "status")
        # Shortcut for docker-status
        make docker-status
        ;;
    "shell")
        # Shortcut for docker-shell-bot
        make docker-shell-bot
        ;;
    "generate-api")
        # Generate API code using the script in scripts directory
        echo -e "${BLUE}Generating API code...${NC}"
        "${PROJECT_DIR}/scripts/openapi.sh" generate
        ;;
    "db-migrate")
        # Run database migrations
        "$PROJECT_DIR/scripts/database/flyway.sh" migrate
        ;;
    "db-info")
        # Show migration info
        "$PROJECT_DIR/scripts/database/flyway.sh" info
        ;;
    "db-create")
        # Create new migration
        "$PROJECT_DIR/scripts/database/flyway.sh" create "$2"
        ;;
    "db-validate")
        # Validate migrations
        "$PROJECT_DIR/scripts/database/flyway.sh" validate
        ;;
    "db-repair")
        # Repair migration metadata
        "$PROJECT_DIR/scripts/database/flyway.sh" repair
        ;;
    "db-reset")
        # Reset database (development only)
        "$PROJECT_DIR/scripts/database/flyway.sh" reset
        ;;
    "db-proxy")
        # Start database proxy to connect to Fly PostgreSQL
        echo -e "${BLUE}ðŸ”Œ Starting database proxy...${NC}"
        echo -e "${YELLOW}Connecting to Fly PostgreSQL database...${NC}"
        echo -e "${YELLOW}Local connection will be available at: localhost:35432${NC}"
        echo -e "${YELLOW}Press Ctrl+C to stop the proxy${NC}"
        echo ""
        flyctl proxy 35432:5432 -a mainote &
        ;;
    "db-undo")
        # Undo last migration
        "$PROJECT_DIR/scripts/database/flyway.sh" undo
        ;;
    "db-test")
        # Test migrations
        "$PROJECT_DIR/scripts/database/flyway.sh" test
        ;;
    "install")
        # Self-installation
        make install-cli
        ;;
    *)
        # Pass through to make with all arguments
        echo -e "${BLUE}Running: make $@${NC}"
        make "$@"
        ;;
esac
