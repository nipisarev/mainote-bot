from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from mainote_bot.config import TELEGRAM_BOT_TOKEN, NOTIFICATION_CHAT_IDS
from mainote_bot.utils.logging import logger
from mainote_bot.notion.tasks import get_active_tasks, format_morning_notification
import mainote_bot.user_preferences as user_preferences
import pytz
from mainote_bot.scheduler.notifications import force_notification_recalculation
from timezonefinder import TimezoneFinder
from datetime import datetime

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    try:
        chat_id = update.effective_chat.id
        
        # First try to get timezone from user's location if available
        if update.effective_message and update.effective_message.location:
            await handle_location(update, context)
            return
            
        # If no location, ask user to share it
        keyboard = [[KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        # Send location request message
        await context.bot.send_message(
            chat_id=chat_id,
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ Notion.\n\n"
                 "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n"
                 "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.",
            reply_markup=reply_markup
        )
        
        # Send main welcome message
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É.\n"
                 "–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏:\n"
                 "üí° –ò–¥–µ—è\n"
                 "‚úÖ –ó–∞–¥–∞—á–∞\n"
                 "üèñ –õ–∏—á–Ω–æ–µ"
        )
        
        logger.info(f"Sent welcome messages to {chat_id}")
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}", exc_info=True)

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle location message to set user's timezone."""
    try:
        chat_id = update.effective_chat.id
        location = update.effective_message.location
        
        if location:
            # Use timezonefinder to get timezone from coordinates
            tf = TimezoneFinder()
            timezone_str = tf.timezone_at(lat=location.latitude, lng=location.longitude)
            
            if timezone_str:
                # Save user's timezone
                if await user_preferences.set_user_timezone(chat_id, timezone_str):
                    logger.info(f"Set timezone to {timezone_str} for chat ID {chat_id}")
                    force_notification_recalculation()
                    
                    # Get timezone offset for display
                    tz = pytz.timezone(timezone_str)
                    offset = tz.utcoffset(datetime.now()).total_seconds() / 3600
                    offset_str = f"UTC{'+' if offset >= 0 else ''}{int(offset)}"
                    
                    # Send timezone confirmation
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timezone_str} ({offset_str}).\n\n"
                             f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º."
                    )
                    
                    # Send main welcome message
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É.\n"
                             "–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏:\n"
                             "üí° –ò–¥–µ—è\n"
                             "‚úÖ –ó–∞–¥–∞—á–∞\n"
                             "üèñ –õ–∏—á–Ω–æ–µ"
                    )
                else:
                    logger.error(f"Failed to save timezone {timezone_str} for chat ID {chat_id}")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            else:
                logger.error(f"Could not determine timezone for coordinates: {location.latitude}, {location.longitude}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /settimezone"
                )
    except Exception as e:
        logger.error(f"Error handling location: {str(e)}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /help command."""
    try:
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
                 "1. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç - –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∑–∞–º–µ—Ç–∫–∞\n"
                 "2. –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏\n"
                 "3. –ì–æ—Ç–æ–≤–æ! –ó–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º Notion\n\n"
                 "–ö–æ–º–∞–Ω–¥—ã:\n"
                 "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                 "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                 "/morning - –ø–æ–ª—É—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\n"
                 "/settime - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø—Ä—è–º—É—é: /settime 14:30)\n"
                 
        )
        logger.info(f"Sent help message to {chat_id}")
    except Exception as e:
        logger.error(f"Error in help command: {str(e)}", exc_info=True)

async def morning_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /morning command to manually trigger morning notification."""
    try:
        chat_id = update.effective_chat.id

        # Add this chat_id to notification recipients if not already there
        chat_id_str = str(chat_id)
        if chat_id_str not in NOTIFICATION_CHAT_IDS and NOTIFICATION_CHAT_IDS != ['']:
            logger.info(f"Adding chat ID {chat_id} to notification recipients")
            # Note: This won't persist after restart, would need to save to a file or database

        # Get active tasks
        tasks = await get_active_tasks()

        # Format notification message
        message = await format_morning_notification(tasks)

        # Send the notification
        await context.bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent manual morning notification to {chat_id}")
    except Exception as e:
        logger.error(f"Error in morning command: {str(e)}", exc_info=True)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def settimezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /settimezone command to configure user timezone."""
    try:
        chat_id = update.effective_chat.id

        # Get current timezone for this user
        current_timezone = user_preferences.get_user_timezone(chat_id)
        current_timezone_msg = f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_timezone}" if current_timezone else "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

        # Common timezones for Russia and nearby regions
        common_timezones = [
            ("Europe/Moscow", "–ú–æ—Å–∫–≤–∞ (UTC+3)"),
            ("Europe/Kaliningrad", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)"),
            ("Europe/Samara", "–°–∞–º–∞—Ä–∞ (UTC+4)"),
            ("Asia/Yekaterinburg", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)"),
            ("Asia/Omsk", "–û–º—Å–∫ (UTC+6)"),
            ("Asia/Krasnoyarsk", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)"),
            ("Asia/Irkutsk", "–ò—Ä–∫—É—Ç—Å–∫ (UTC+8)"),
            ("Asia/Yakutsk", "–Ø–∫—É—Ç—Å–∫ (UTC+9)"),
            ("Asia/Vladivostok", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)"),
            ("Asia/Magadan", "–ú–∞–≥–∞–¥–∞–Ω (UTC+11)"),
            ("Asia/Kamchatka", "–ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)")
        ]

        # Create buttons for timezone selection
        keyboard = []
        for tz_name, tz_display in common_timezones:
            keyboard.append([InlineKeyboardButton(tz_display, callback_data=f"timezone:{tz_name}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # Create a new bot instance for this event loop
        local_bot = Bot(token=TELEGRAM_BOT_TOKEN)

        await local_bot.send_message(
            chat_id=chat_id,
            text=f"üåê –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n{current_timezone_msg}",
            reply_markup=reply_markup
        )
        logger.info(f"Sent timezone selection buttons to {chat_id}")
    except Exception as e:
        logger.error(f"Error in settimezone command: {str(e)}", exc_info=True)
        # Create a new bot instance for this event loop
        local_bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await local_bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def settime_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /settime command to configure notification time."""
    try:
        chat_id = update.effective_chat.id

        # Check if user has timezone set
        user_timezone = await user_preferences.get_user_timezone(chat_id)
        if not user_timezone:
            # Create a new bot instance for this event loop
            local_bot = Bot(token=TELEGRAM_BOT_TOKEN)
            await local_bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settimezone –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—à–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."
            )
            return

        # Check if a time argument was provided
        if context.args and len(context.args) > 0:
            time_arg = context.args[0]

            # Validate time format (HH:MM)
            try:
                hour, minute = map(int, time_arg.split(':'))
                if 0 <= hour < 24 and 0 <= minute < 60:
                    # Save user preference
                    if await user_preferences.set_user_notification_time(chat_id, time_arg):
                        logger.info(f"Set notification time to {time_arg} for chat ID {chat_id}")

                        # Create a new bot instance for this event loop
                        local_bot = Bot(token=TELEGRAM_BOT_TOKEN)

                        # Get timezone offset for display
                        tz = pytz.timezone(user_timezone)
                        offset = tz.utcoffset(datetime.now()).total_seconds() / 3600
                        offset_str = f"UTC{'+' if offset >= 0 else ''}{int(offset)}"

                        # Send confirmation
                        await local_bot.send_message(
                            chat_id=chat_id,
                            text=f"‚è∞ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_arg} ({user_timezone}, {offset_str}).\n\n"
                                 f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_arg} –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."
                        )
                        return
                    else:
                        logger.error(f"Failed to save notification time for chat ID {chat_id}")
                else:
                    logger.error(f"Invalid time format: {time_arg}")
            except Exception as e:
                logger.error(f"Error parsing time argument: {str(e)}", exc_info=True)
                # Continue to show time selection buttons

        # Get current notification time for this user
        current_time = await user_preferences.get_user_notification_time(chat_id)
        current_time_msg = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_time}" if current_time else "–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

        # Create buttons for common times (more options)
        keyboard = [
            [
                InlineKeyboardButton("06:00", callback_data="time:06:00"),
                InlineKeyboardButton("07:00", callback_data="time:07:00"),
                InlineKeyboardButton("08:00", callback_data="time:08:00")
            ],
            [
                InlineKeyboardButton("09:00", callback_data="time:09:00"),
                InlineKeyboardButton("10:00", callback_data="time:10:00"),
                InlineKeyboardButton("11:00", callback_data="time:11:00")
            ],
            [
                InlineKeyboardButton("12:00", callback_data="time:12:00"),
                InlineKeyboardButton("14:00", callback_data="time:14:00"),
                InlineKeyboardButton("16:00", callback_data="time:16:00")
            ],
            [
                InlineKeyboardButton("18:00", callback_data="time:18:00"),
                InlineKeyboardButton("20:00", callback_data="time:20:00"),
                InlineKeyboardButton("22:00", callback_data="time:22:00")
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Create a new bot instance for this event loop
        local_bot = Bot(token=TELEGRAM_BOT_TOKEN)

        await local_bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/settime –ß–ß:–ú–ú' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n{current_time_msg}",
            reply_markup=reply_markup
        )
        logger.info(f"Sent time selection buttons to {chat_id}")
    except Exception as e:
        logger.error(f"Error in settime command: {str(e)}", exc_info=True)
        # Create a new bot instance for this event loop
        local_bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await local_bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )