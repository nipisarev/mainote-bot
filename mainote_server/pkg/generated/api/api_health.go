/*
 * Mainote Server API
 *
 * REST API for Mainote Server - a note management service.  This API provides CRUD operations for managing notes with support for: - Creating, reading, updating, and deleting notes - Filtering by category, status, and chat ID - Pagination for large result sets - Rich metadata support using JSON  ## Authentication Currently no authentication is required (development mode).  ## Rate Limiting No rate limiting is currently implemented.
 *
 * API version: 1.0.0
 * Contact: support@mainote.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"mainote-backend/pkg/server/middleware"
	"mainote-backend/pkg/validator"
	"net/http"
	"strings"

	v "github.com/go-playground/validator/v10"

	"github.com/gorilla/mux"
)

// HealthAPIController binds http requests to an api service and writes the service results to the http response
type HealthAPIController struct {
	service      HealthAPIServicer
	errorHandler ErrorHandler
	validator    *v.Validate
	middlewares  map[string][]middleware.MiddlewareFunc
}

// HealthAPIOption for how the controller is set up.
type HealthAPIOption func(*HealthAPIController)

// WithHealthAPIErrorHandler inject ErrorHandler into controller
func WithHealthAPIErrorHandler(h ErrorHandler) HealthAPIOption {
	return func(c *HealthAPIController) {
		c.errorHandler = h
	}
}

func WithHealthAPIMiddlewares(middlewares map[string][]middleware.MiddlewareFunc) HealthAPIOption {
	return func(c *HealthAPIController) {
		c.middlewares = middlewares
	}
}

// NewHealthAPIController creates a default api controller
func NewHealthAPIController(s HealthAPIServicer, opts ...HealthAPIOption) Router {
	controller := &HealthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
		validator:    validator.New(),
		middlewares:  map[string][]middleware.MiddlewareFunc{},
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

func (c *HealthAPIController) Middlewares() map[string][]middleware.MiddlewareFunc {
	return c.middlewares
}

// Routes returns all the api routes for the HealthAPIController
func (c *HealthAPIController) Routes() Routes {
	return Routes{
		"CheckHealth": Route{
			strings.ToUpper("Get"),
			"/health",
			c.CheckHealth,
		},
	}
}

// CheckHealth - Health check
func (c *HealthAPIController) CheckHealth(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	result, err := c.service.CheckHealth(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
