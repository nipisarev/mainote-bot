/*
 * Mainote Server API
 *
 * REST API for Mainote Server - a note management service.  This API provides CRUD operations for managing notes with support for: - Creating, reading, updating, and deleting notes - Filtering by category, status, and chat ID - Pagination for large result sets - Rich metadata support using JSON  ## Authentication Currently no authentication is required (development mode).  ## Rate Limiting No rate limiting is currently implemented.
 *
 * API version: 1.0.0
 * Contact: support@mainote.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"mainote-backend/pkg/server/middleware"
	"mainote-backend/pkg/validator"
	"net/http"
	"strings"

	v "github.com/go-playground/validator/v10"

	"github.com/gorilla/mux"
)

// NotesAPIController binds http requests to an api service and writes the service results to the http response
type NotesAPIController struct {
	service      NotesAPIServicer
	errorHandler ErrorHandler
	validator    *v.Validate
	middlewares  map[string][]middleware.MiddlewareFunc
}

// NotesAPIOption for how the controller is set up.
type NotesAPIOption func(*NotesAPIController)

// WithNotesAPIErrorHandler inject ErrorHandler into controller
func WithNotesAPIErrorHandler(h ErrorHandler) NotesAPIOption {
	return func(c *NotesAPIController) {
		c.errorHandler = h
	}
}

func WithNotesAPIMiddlewares(middlewares map[string][]middleware.MiddlewareFunc) NotesAPIOption {
	return func(c *NotesAPIController) {
		c.middlewares = middlewares
	}
}

// NewNotesAPIController creates a default api controller
func NewNotesAPIController(s NotesAPIServicer, opts ...NotesAPIOption) Router {
	controller := &NotesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
		validator:    validator.New(),
		middlewares:  map[string][]middleware.MiddlewareFunc{},
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

func (c *NotesAPIController) Middlewares() map[string][]middleware.MiddlewareFunc {
	return c.middlewares
}

// Routes returns all the api routes for the NotesAPIController
func (c *NotesAPIController) Routes() Routes {
	return Routes{
		"CreateNote": Route{
			strings.ToUpper("Post"),
			"/api/v1/notes",
			c.CreateNote,
		},
		"DeleteNote": Route{
			strings.ToUpper("Delete"),
			"/api/v1/notes/{noteId}",
			c.DeleteNote,
		},
		"GetNoteById": Route{
			strings.ToUpper("Get"),
			"/api/v1/notes/{noteId}",
			c.GetNoteById,
		},
		"ListNotes": Route{
			strings.ToUpper("Get"),
			"/api/v1/notes",
			c.ListNotes,
		},
		"UpdateNote": Route{
			strings.ToUpper("Put"),
			"/api/v1/notes/{noteId}",
			c.UpdateNote,
		},
	}
}

// CreateNote - Create a note
func (c *NotesAPIController) CreateNote(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	createNoteRequestParam := CreateNoteRequest{}
	d := json.NewDecoder(r.Body)
	if err := d.Decode(&createNoteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateNoteRequestRequired(&createNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateNoteRequestConstraints(&createNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := c.validator.Struct(createNoteRequestParam); err != nil {
		if valErr, ok := err.(v.ValidationErrors); ok {
			convertedErr := validator.ConvertValidatorError(valErr)
			c.errorHandler(w, r, &convertedErr, nil)
		} else {
			c.errorHandler(w, r, err, nil)
		}
		return
	}
	result, err := c.service.CreateNote(r.Context(), createNoteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteNote - Delete a note
func (c *NotesAPIController) DeleteNote(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	result, err := c.service.DeleteNote(r.Context(), noteIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNoteById - Get a note
func (c *NotesAPIController) GetNoteById(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	result, err := c.service.GetNoteById(r.Context(), noteIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListNotes - List notes
func (c *NotesAPIController) ListNotes(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	query := r.URL.Query()
	chatIdParamStr := query.Get("chat_id")
	chatIdParam := string(chatIdParamStr)
	categoryParamStr := query.Get("category")
	categoryParam := NoteCategory(categoryParamStr)
	statusParamStr := query.Get("status")
	statusParam := NoteStatus(statusParamStr)
	limitParam, err := parseNumericParameter[int32](
		query.Get("limit"),
		WithDefaultOrParse[int32](10, parseInt32),
		WithMinimum[int32](1),
		WithMaximum[int32](100),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseNumericParameter[int32](
		query.Get("offset"),
		WithDefaultOrParse[int32](0, parseInt32),
		WithMinimum[int32](0),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListNotes(r.Context(), chatIdParam, categoryParam, statusParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateNote - Update a note
func (c *NotesAPIController) UpdateNote(w http.ResponseWriter, r *http.Request) {
	// Suppress unused import warnings
	_ = json.Marshal
	_ = mux.Vars
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	updateNoteRequestParam := UpdateNoteRequest{}
	d := json.NewDecoder(r.Body)
	if err := d.Decode(&updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateNoteRequestRequired(&updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateNoteRequestConstraints(&updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := c.validator.Struct(updateNoteRequestParam); err != nil {
		if valErr, ok := err.(v.ValidationErrors); ok {
			convertedErr := validator.ConvertValidatorError(valErr)
			c.errorHandler(w, r, &convertedErr, nil)
		} else {
			c.errorHandler(w, r, err, nil)
		}
		return
	}
	result, err := c.service.UpdateNote(r.Context(), noteIdParam, updateNoteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
