/*
 * Mainote Server API
 *
 * REST API for Mainote Server - a note management service.  This API provides CRUD operations for managing notes with support for: - Creating, reading, updating, and deleting notes - Filtering by category, status, and chat ID - Pagination for large result sets - Rich metadata support using JSON  ## Authentication Currently no authentication is required (development mode).  ## Rate Limiting No rate limiting is currently implemented.
 *
 * API version: 1.0.0
 * Contact: support@mainote.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"errors"
)

type PaginationInfo struct {

	// Total number of notes matching the filter
	Total int32 `json:"total"`

	// Maximum number of notes per page
	Limit int32 `json:"limit"`

	// Number of notes skipped
	Offset int32 `json:"offset"`

	// Whether there are more notes available
	HasMore bool `json:"has_more"`
}

// AssertPaginationInfoRequired checks if the required fields are not zero-ed
func AssertPaginationInfoRequired(obj *PaginationInfo) (err error) {
	elements := map[string]any{
		"total":    obj.Total,
		"limit":    obj.Limit,
		"offset":   obj.Offset,
		"has_more": obj.HasMore,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}
	return nil
}

// AssertPaginationInfoConstraints checks if the values respects the defined constraints
func AssertPaginationInfoConstraints(obj *PaginationInfo) error {
	if obj.Total < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Limit < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Limit > 100 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Offset < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
