// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Mainote Server API
 *
 * REST API for Mainote Server - a note management service.  This API provides CRUD operations for managing notes with support for: - Creating, reading, updating, and deleting notes - Filtering by category, status, and chat ID - Pagination for large result sets - Rich metadata support using JSON  ## Authentication Currently no authentication is required (development mode).  ## Rate Limiting No rate limiting is currently implemented. 
 *
 * API version: 1.0.0
 * Contact: support@mainote.com
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NotesAPIController binds http requests to an api service and writes the service results to the http response
type NotesAPIController struct {
	service NotesAPIServicer
	errorHandler ErrorHandler
}

// NotesAPIOption for how the controller is set up.
type NotesAPIOption func(*NotesAPIController)

// WithNotesAPIErrorHandler inject ErrorHandler into controller
func WithNotesAPIErrorHandler(h ErrorHandler) NotesAPIOption {
	return func(c *NotesAPIController) {
		c.errorHandler = h
	}
}

// NewNotesAPIController creates a default api controller
func NewNotesAPIController(s NotesAPIServicer, opts ...NotesAPIOption) *NotesAPIController {
	controller := &NotesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotesAPIController
func (c *NotesAPIController) Routes() Routes {
	return Routes{
		"CreateNote": Route{
			strings.ToUpper("Post"),
			"/api/v1/notes",
			c.CreateNote,
		},
		"DeleteNote": Route{
			strings.ToUpper("Delete"),
			"/api/v1/notes/{noteId}",
			c.DeleteNote,
		},
		"GetNoteById": Route{
			strings.ToUpper("Get"),
			"/api/v1/notes/{noteId}",
			c.GetNoteById,
		},
		"ListNotes": Route{
			strings.ToUpper("Get"),
			"/api/v1/notes",
			c.ListNotes,
		},
		"UpdateNote": Route{
			strings.ToUpper("Put"),
			"/api/v1/notes/{noteId}",
			c.UpdateNote,
		},
	}
}

// CreateNote - Create a note
func (c *NotesAPIController) CreateNote(w http.ResponseWriter, r *http.Request) {
	createNoteRequestParam := CreateNoteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createNoteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateNoteRequestRequired(createNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateNoteRequestConstraints(createNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNote(r.Context(), createNoteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteNote - Delete a note
func (c *NotesAPIController) DeleteNote(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	if noteIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"noteId"}, nil)
		return
	}
	result, err := c.service.DeleteNote(r.Context(), noteIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNoteById - Get a note
func (c *NotesAPIController) GetNoteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	if noteIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"noteId"}, nil)
		return
	}
	result, err := c.service.GetNoteById(r.Context(), noteIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListNotes - List notes
func (c *NotesAPIController) ListNotes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var chatIdParam string
	if query.Has("chat_id") {
		param := query.Get("chat_id")

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chat_id"}, nil)
		return
	}
	var categoryParam NoteCategory
	if query.Has("category") {
		param := NoteCategory(query.Get("category"))

		categoryParam = param
	} else {
	}
	var statusParam NoteStatus
	if query.Has("status") {
		param := NoteStatus(query.Get("status"))

		statusParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.ListNotes(r.Context(), chatIdParam, categoryParam, statusParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateNote - Update a note
func (c *NotesAPIController) UpdateNote(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	noteIdParam := params["noteId"]
	if noteIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"noteId"}, nil)
		return
	}
	updateNoteRequestParam := UpdateNoteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateNoteRequestRequired(updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateNoteRequestConstraints(updateNoteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNote(r.Context(), noteIdParam, updateNoteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
