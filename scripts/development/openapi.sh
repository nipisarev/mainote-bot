#!/usr/bin/env bash

# OpenAPI Code Generation Script for Mainote Server
# 
# This script generates Go server code and YAML specifications from OpenAPI 3.0.3 definitions.
# Refactored to work with single mainote-server service (removed multi-service architecture).
#
# Usage:
#   source scripts/development/openapi.sh
#   generate_api              # Generate both YAML and Go code
#   generate_mainote_api      # Convenience function (same as generate_api)
#   generate_api_yaml         # Generate only YAML specification
#   generate_api_server_go    # Generate only Go server code
#
# Requirements:
#   - Docker (uses pscht/oapigen:v1 image)
#   - OpenAPI source file: mainote_server/api/src.yaml
#   - Go templates: extra/openapi-templates/go-server/
#
# Output Structure:
#   - YAML files: mainote_server/api/generated/*.yaml
#   - Go files: mainote_server/pkg/generated/*.go (flattened, no subdirectories)

function docker_run() {
  docker run --rm \
    -v "${PWD}":/app \
    -w /app \
    "${@}"
}

function generate_openapi() {
  local src=''
  local out=''
  local subdir=''
  local jopts='-Xss4M'
  local args=()

  while (($# > 0)); do
    local arg="${1}"; shift

    case "${arg}" in
      -s | --source) src="${1}"; shift ;;
      -o | --output) out="${1}"; shift ;;
      -d | --subdir) subdir="${1}"; shift ;;
      -j | --java-opts) jopts="${1}"; shift ;;
      *) args+=("${arg}") ;;
    esac
  done

  if [[ -z "${out}" ]]; then
    echo "ERROR: -o | --out is required"
    exit 1
  fi

  local root
  local tmpdir
  root="$(git rev-parse --show-toplevel)"
  tmpdir="$(mktemp -d)"

  # shellcheck disable=SC2115
  rm -rf "${root}/${out}/${subdir}"
  mkdir -p "${root}/${out}"

  docker_run \
    -v "${tmpdir}:/output" \
    -e JAVA_OPTS="${jopts}" \
    pscht/oapigen:v1 \
    generate \
      -i "${src}" \
      -o '/output' \
      "${args[@]}"

  # Handle absolute vs relative output paths
  local output_path
  if [[ "${out}" = /* ]]; then
    # Absolute path - use as is
    output_path="${out}"
  else
    # Relative path - prepend root
    output_path="${root}/${out}"
  fi
  
  if [[ -n "${subdir}" && "${subdir}" != "." ]]; then
    cp -R "${tmpdir}/${subdir}" "${output_path}/"
  else
    cp -R "${tmpdir}"/. "${output_path}/"
  fi

  # Clean up temporary directory safely (only our tmpdir)
  rm -rf "${tmpdir}"
}

# Generate YAML specification from OpenAPI source
function generate_api_yaml {
  echo "🔨 Generating OpenAPI YAML specification..."
  echo "   Source: mainote_server/api/src.yaml"
  echo "   Output: mainote_server/api/generated/openapi.yaml"

  # Create output directory if it doesn't exist
  mkdir -p "mainote_server/api/generated"

  # Generate YAML using the generate_openapi function
  generate_openapi -g openapi-yaml \
     -s "mainote_server/api/src.yaml" \
     -o "mainote_server/api/generated/" \
     --additional-properties="outputFile=openapi.yaml" \
     --skip-operation-example \
     -d "."

  # Find and move the generated YAML file to the root of the generated directory
  local yaml_file=""
  if [[ -f "mainote_server/api/generated/openapi.yaml" ]]; then
    yaml_file="mainote_server/api/generated/openapi.yaml"
  elif [[ -f "mainote_server/api/generated/openapi/openapi.yaml" ]]; then
    mv "mainote_server/api/generated/openapi/openapi.yaml" "mainote_server/api/generated/openapi.yaml"
    rmdir "mainote_server/api/generated/openapi" 2>/dev/null || rm -rf "mainote_server/api/generated/openapi"
    yaml_file="mainote_server/api/generated/openapi.yaml"
  else
    # Search for any YAML file that was generated
    yaml_file=$(find "mainote_server/api/generated" -name "*.yaml" -type f | head -1)
    if [[ -n "$yaml_file" && "$yaml_file" != "mainote_server/api/generated/openapi.yaml" ]]; then
      mv "$yaml_file" "mainote_server/api/generated/openapi.yaml"
      yaml_file="mainote_server/api/generated/openapi.yaml"
    fi
  fi

  if [[ -f "$yaml_file" ]]; then
    # Clean up unwanted files generated by openapi-generator
    echo "🧹 Cleaning up unwanted generated files..."
    
    # Remove unwanted files and directories
    rm -rf "mainote_server/api/generated/.openapi-generator" 2>/dev/null
    rm -f "mainote_server/api/generated/.openapi-generator-ignore" 2>/dev/null
    rm -f "mainote_server/api/generated/README.md" 2>/dev/null
    
    echo "✅ Successfully generated OpenAPI YAML specification"
    echo "📁 Generated file: $yaml_file"
  else
    echo "❌ Failed to generate OpenAPI YAML"
    echo "Contents of generated directory:"
    find "mainote_server/api/generated" -type f 2>/dev/null || echo "No files found"
    return 1
  fi
}

# Generate Go server code from OpenAPI specification
function generate_api_server_go {
  local only_interfaces=${1:-true}  # Default to true if not provided
  local package_name=${2:-"api"}    # Default package name

  echo "🔨 Generating Go server code for mainote_server..."
  echo "   Source: mainote_server/api/src.yaml"
  echo "   Output: mainote_server/pkg/generated/ (Go files only, flattened)"
  echo "   Package: ${package_name}"

  # Create output directory if it doesn't exist
  mkdir -p "mainote_server/pkg/generated"

  # Generate Go server code to a temporary location first
  local temp_output_dir
  temp_output_dir="$(mktemp -d)"
  
  generate_openapi -g go-server \
     -s "mainote_server/api/src.yaml" \
     -o "${temp_output_dir}" \
     -d "${package_name}" \
     -t "./extra/openapi-templates/go-server" \
     --additional-properties "outputAsLibrary=true,sourceFolder=${package_name},onlyInterfaces=${only_interfaces},packageName=${package_name}"

  # Remove existing Go files in target directory
  rm -f mainote_server/pkg/generated/*.go

  # Find and copy Go files from any subdirectory structure
  local go_files_found=0
  
  # Look for Go files in the expected subdirectory
  if [[ -d "${temp_output_dir}/${package_name}" ]]; then
    echo "📦 Found Go files in ${package_name} subdirectory..."
    find "${temp_output_dir}/${package_name}" -name "*.go" -exec cp {} "mainote_server/pkg/generated/" \;
    go_files_found=$(find "mainote_server/pkg/generated" -name "*.go" | wc -l)
  fi
  
  # If no files found in subdirectory, look in the root of temp directory
  if [[ $go_files_found -eq 0 ]]; then
    echo "📦 Looking for Go files in root directory..."
    find "${temp_output_dir}" -name "*.go" -exec cp {} "mainote_server/pkg/generated/" \;
    go_files_found=$(find "mainote_server/pkg/generated" -name "*.go" | wc -l)
  fi

  # Verify and report results
  if [[ $go_files_found -gt 0 ]]; then
    echo "✅ Successfully generated $go_files_found Go files in mainote_server/pkg/generated/"
    echo "📁 Generated files:"
    find "mainote_server/pkg/generated" -name "*.go" | head -5
    if [[ $go_files_found -gt 5 ]]; then
      echo "   ... and $((go_files_found - 5)) more files"
    fi
    echo "📊 Total Go files generated: $go_files_found"
  else
    echo "❌ No Go files were generated"
    echo "Contents of temp directory:"
    find "${temp_output_dir}" -type f | head -10
    rm -rf "$(dirname "${temp_output_dir}")"
    return 1
  fi
  
  # Clean up temporary directory
  rm -rf "${temp_output_dir}"
}

# Main function to generate both YAML and Go code
function generate_api {
  echo "🚀 Starting OpenAPI code generation for Mainote Server..."
  echo ""
  
  # Check prerequisites
  if ! command -v docker &> /dev/null; then
    echo "❌ Docker is not available. Please install Docker and make sure it's running."
    return 1
  fi

  if [[ ! -f "mainote_server/api/src.yaml" ]]; then
    echo "❌ OpenAPI source file not found: mainote_server/api/src.yaml"
    return 1
  fi

  # Generate YAML specification
  if generate_api_yaml; then
    echo ""
  else
    echo "❌ Failed to generate YAML specification"
    return 1
  fi
  
  # Generate Go server code
  if generate_api_server_go true "api"; then
    echo ""
  else
    echo "❌ Failed to generate Go server code"
    return 1
  fi
  
  echo "🎉 OpenAPI code generation completed successfully!"
  echo ""
  echo "Generated files:"
  echo "  📄 YAML: mainote_server/api/generated/openapi.yaml"
  echo "  🐹 Go files: mainote_server/pkg/generated/*.go"
}

# Convenience function for quick generation with default settings
function generate_mainote_api {
  generate_api
}

# Clean up generated files
function clean {
  echo "🧹 Cleaning up generated OpenAPI files..."
  
  # Remove generated Go files
  if [[ -d "mainote_server/pkg/generated" ]]; then
    rm -f mainote_server/pkg/generated/*.go
    echo "✅ Removed Go files from mainote_server/pkg/generated/"
  fi
  
  # Remove generated YAML files
  if [[ -d "mainote_server/api/generated" ]]; then
    rm -f mainote_server/api/generated/*.yaml
    echo "✅ Removed YAML files from mainote_server/api/generated/"
  fi
  
  echo "🎉 Cleanup completed!"
}
